* Your object
From my understanding, your objectives are:

- Compare `csv` files in 2 version folders, all filenames are same;
- filenames contain date information;
- For each file:
  - the first row of `csv` files is columns title;
  - the rest rows are data to compare;
  - their is no column can be used as an nature index.
- The program should save result in file rather than print to screen;

* some reference

** Filter files by name pattern

Use fnmatch.filter(alist, glob_name_pattern) to return a list of name with some glob pattern, i.e.

`fnmatch.filter(os.listdir(), '*.csv')`

return all .csv file in current dir.

** Transfer string to date (pd.to_dataframe)

You can use pandas general function to convert string or ymd interger to date data.
This general function from pandas accept several sequence arguments as input:

- sequence of int, ordered by "year", "month", "day"
  if a DataFrame is provided,
- string of date in localized format
  to set your local from your platform default, import locale module and set as follow:

```
import locale
locale.setlocale(locale.ALL='')
```

** Nested `for...` Loop (causing slow)

When iter over 2 iterable with same size (length), you use a nested `for...` structure, that costs n*n times of loop. There's 574 csv files in each version folder, so it use 574*574 loop, this is main cause of slow.
Instead, use zip() to pair iterable with same size, then iter on the new zip object, this costs n times of loop and save n*(n-1) times from nested loop.

```
for old, new in zip(olds, news):
    my_func_to_compare(old, new)  # loop body here
```

* example code

* parse filename

** question
   all the filenames are not the same. Each file is named by its timestamp along with information about client number and their legal number as such Timecard-MC1003-1-20220425100254-Reported. I am not sure what your code is doing, it's so extensive. For each row of a file that's being compared, I need to display the timestamp i.e filename alongside.
   
** answer
   For how to parse filename and transfer timestamp, please refer to `re` python builtin module:
   https://docs.python.org/3.10/library/re.html?highlight=re#module-re
   and use online tool such as https://regex101.com/ to verify your regex expression.
   Then alter it in function `to_timestamp`
   An example:

   import re
   ...
   
   # add pattern in function to_timestamp(s):
   # following line is example, you will pass-in s as argument in practise
   s = "Timecard-MC1003-1-20220425100254-Reported.csv"

   head, ext = os.path.splitext(s)
   pat = rer"""(P?<client>)-(P?<legel>)-(P?<rand_int>)-(P?<timestamp>)-(P?<suffix>)"""

* Compare missing file

** question
   So let's say I have two folders - Folder A and Folder B, with two files in A and one in B. After running the program it should display the following: Folder A had a record in file "FolderA_Timecard-MC1010-19-20220507140122-Reported" with row number 2 that was not present in Folder B. Record is: MC1010-19 21044174 58.55 12341

** answer
   I think I already considered this situation: File exists only in one side of Version folder. You can transfer it to compare to an empty DataFrame with same shape.
   As for output result, I am organized it to csv table, includes:
   - unnamed index: The FileName
   - unnamed index: Timestamp
   - Index: Represent Row information
   - Column: Represent Column information
   - value_new: Value from New Folder
   - value_old: Value from Old Folder
   - _source:
     - both: exists in both version and number is changed
     - left_only: exists only in new version
     - right_only: exists only in old version
